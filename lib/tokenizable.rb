require 'tokenizable/version'
require 'active_support'

module Tokenizable

  class TokenizerError < ArgumentError
  end

  module Base
    extend ActiveSupport::Concern

    module ClassMethods
      # Key, index, and callback setup needed to add a token attribute to a model
      # @note When implementing tokenization on a new model, you must run seed_tokens before implementing this method, lest
      # @author Groeneman (9/13) - Created
      def tokenize
        field :token, type: String
        set_callback(:create,:before,:create_token)
        index({ token: 1 }, { unique: true })
      end

      # Overrides the ActiveRecord find method to allow searching by token.
      # @note This method assumes that a 24-length string is a mongo ID, and anything else is a token. Point being, there should never be a 24-length token.  If you had such a long token, why use tokens in the first place?
      # @param token_or_id [String] A token or a mongo ID
      # @return An instance of the requested model or nil if no matching instance exists
      # @author Groeneman (9/13) - Created
      def find(token_or_id)
        if !token_or_id.kind_of?(Array) && token_or_id.to_s.length != 24
          self.find_by(token: token_or_id)
        else
          super token_or_id
        end
      end

      # Sets all tokens to nil.
      # @note This should probably never be run in production.
      # @note You'll need to drop the unique constraint on the token key before running this
      # @author Groeneman (9/13) - Created
      def clear_tokens
        return nil if const_defined?('Rails') && Rails.env == "production"
        where({}).each do |i|
          i.write_attribute(:token, nil)
          i.save!
        end
      end

      # Generates and saves a token for all instances of the implementing model without a token
      # @author Groeneman (9/13) - Created
      def seed_tokens
        where(token: nil).each do |i|
          i.create_token
          i.save!
        end
      end

      # A backup generic token generator
      # @author Groeneman (10/13) - Created
      def generic_token_generator length, offset
        letters = ('a'..'z').to_a.concat(('0'..'9').to_a)
        Array.new(length).map{letters.sample}.join
      end
    end

    # If a model instance doesn't have a token, repeatedly calls generate_token until a unique token is found, and then saves the token.
    # @author Groeneman (9/13) - Created
    def create_token
      return nil unless self.token.nil?
      offset = 0
      new_token = nil
      while self.token.nil?
        new_token = generate_token(offset).to_s
        new_token = self.class.generic_token_generator(6,offset) if new_token.length < 3
        new_token += "a" if new_token.length == 24
        # Use single_collection_root so tokenizer works with single collection polymorphism in Mongo - MWG 01/14
        if self.class.collection.find(token:new_token.to_s).count.zero?
          self.token = new_token.to_s
        end
        offset+=1
      end
    end

    # Overrides the default save method to ensure a unique token. Repeatedly calls create_token until the (blocking) save is successful.
    # @return [Boolean] True if the save succeeded, else false
    # @author Groeneman (9/13) - Created
    def save args={}
      result = nil
      if new_record?
        done = false
        while !done
          begin
            result = super args
          rescue Mongo::Error::OperationFailure => e
            if e.message.include?("E11000") && e.message.include?("token")
              write_attribute(:token,nil) # Use write attribute to avoid the immutability imposed by token= (MWG 09/13)
              create_token
            else
              raise
            end
          else
            done = true
          end
        end
      else
        result = super args
      end
      result
    end

    # Specify to_param, so that URLs generated by _path calls will use the token instead of the id
    # @return [String] The model instance's token
    # @author Groeneman (9/13) - Created
    # @author Groeneman (5/15) - De-privatize for Mongoid4 compatibility
    def to_param
      token
    end

    # Setter for token. Only allows setting if token is currently nil.
    # @author Groeneman (9/13) - Created
    def token= val
      if self.token.nil?
        if val.to_s.length!=24
          write_attribute :token, val
        else
          raise TokenizerError, "Token can't be length 24."
        end
      else
        raise TokenizerError, "Token is already set, can't set again."
      end
    end

    private

    # Generate a token for an instance of a model. This token generator makes a random six-alpha lowercase string.
    # @param offset [Integer] This method will be called with different values for this parameter until a unique token is given. In this implementation, the parameter is ignored, and a token is generated randomly.
    # @author Groeneman (9/13) - Created
    def generate_token offset
      self.class.generic_token_generator 6,offset
    end

  end
end
